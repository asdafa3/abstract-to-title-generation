# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01-gpt2-with-value-head.ipynb (unless otherwise specified).

__all__ = ['ValueHead', 'BartHeadWithValueModel', 'respond_to_batch', 'respond_to_batch_new']

# Cell

from transformers import AutoModelForSeq2SeqLM, BartTokenizer, BartModel, BartPretrainedModel, BartConfig
from transformers import top_k_top_p_filtering, BeamSearchScorer
from torch import nn
from torch.nn import Identity
import torch.nn.functional as F
import torch
from transformers import BartForConditionalGeneration
from torch.nn import BCEWithLogitsLoss, CrossEntropyLoss, MSELoss

from typing import List, Optional, Tuple, Union

# Cell

class ValueHead(nn.Module):
    """The ValueHead class implements a head for GPT2 that returns a scalar for each output token."""
    def __init__(self, config: BartConfig):
        super().__init__()

        self.detach_head = False

        self.summary = Identity()
        num_classes = config.num_labels
        self.summary = nn.Linear(config.hidden_size, 1)


        self.activation = Identity()
        self.activation = nn.Tanh()


        self.first_dropout = Identity()
        self.first_dropout = nn.Dropout(config.dropout)

        self.last_dropout = Identity()
        self.last_dropout = nn.Dropout(config.dropout)

        self.flatten = nn.Flatten()

    def forward(self, hidden_states, cls_index=None):
        if self.detach_head:
            output = hidden_states.detach()
        else:
            output = hidden_states
        output = self.first_dropout(output)
        output = self.summary(output)
        output = self.activation(output)
        output = self.last_dropout(output)

        return output

# Cell
class BartHeadWithValueModel(BartPretrainedModel):
    """The GPT2HeadWithValueModel class implements a GPT2 language model with a secondary, scalar head."""
    def __init__(self, config: BartConfig):
      super().__init__(config)
      self.model  = BartForConditionalGeneration(config)

      self.v_head = ValueHead(config)

    def forward(
        self,
        input_ids: torch.LongTensor = None,
        attention_mask: Optional[torch.Tensor] = None,
        decoder_input_ids: Optional[torch.LongTensor] = None,
        decoder_attention_mask: Optional[torch.LongTensor] = None,
        head_mask: Optional[torch.Tensor] = None,
        decoder_head_mask: Optional[torch.Tensor] = None,
        cross_attn_head_mask: Optional[torch.Tensor] = None,
        encoder_outputs: Optional[List[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        decoder_inputs_embeds: Optional[torch.FloatTensor] = None,
        labels: Optional[torch.LongTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
        ):
        
        outputs = self.model(
            input_ids,
            attention_mask=attention_mask,
            decoder_input_ids=decoder_input_ids,
            decoder_attention_mask=decoder_attention_mask,
            head_mask=head_mask,
            decoder_head_mask=decoder_head_mask,
            cross_attn_head_mask=cross_attn_head_mask,
            encoder_outputs=encoder_outputs,
            inputs_embeds=inputs_embeds,
            decoder_inputs_embeds=decoder_inputs_embeds,
            use_cache=use_cache,
            output_attentions=output_attentions,
            output_hidden_states=output_hidden_states,
            return_dict=return_dict,
        )
        '''
        lm_logits = outputs[0]
        hidden_states = outputs[2]
        value = self.v_head(hidden_states).squeeze(-1)
        outputs['value_head'] = value
        '''
        return outputs
# Cell

def respond_to_batch(model, queries, txt_len=20, top_k=0, top_p=1.0):
    """Sample text from language model."""
    input_ids = queries
    for i in range(txt_len):
        # Get Logits
        outputs = model(input_ids)
        next_token_logits = outputs[0][:, -1, :]
        next_token_logits = top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)

        # Sample
        probs = F.softmax(next_token_logits, dim=-1)
        next_token = torch.multinomial(probs, num_samples=1).squeeze(1)
        input_ids = torch.cat([input_ids, next_token.unsqueeze(-1)], dim=-1)
    return input_ids[:, -txt_len:]

def respond_to_batch_new(model, input_ids, attention_mask, txt_len=30):
  title_ids = model.generate(
            input_ids = input_ids,
            attention_mask = attention_mask,
            max_length = txt_len,
            num_beams = 5,
            num_return_sequences = 1,
            repetition_penalty=2.0, 
            length_penalty=10.0,
            early_stopping = True,
            )

  return title_ids
  
